{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/miscellaneous/ProfileModal.js","config/ChatLogics.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","Container","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","variant","TabList","mb","Tab","TabPanels","TabPanel","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","color","socket","selectedChatCompare","SingleChat","fetchAgain","setFetchAgain","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","sendMessage","emit","Authorization","token","chatId","io","on","get","fetchMessages","newMessageReceived","chat","includes","pb","ArrowBackIcon","chatName","toUpperCase","overflowY","Spinner","alignSelf","margin","className","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","onKeyDown","key","aria-label","FaTelegramPlane","ml","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","groupChatName","setGroupChatName","selectedUsers","setSelectedUsers","search","setSearch","searchResult","setSearchResult","query","handleSearch","flexWrap","u","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","isGroupChat","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","find","c","leftIcon","_active","_focus","boxShadow","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.34497599.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      \n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    \n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        \n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      \n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      console.log(\"data\",data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n          Talk-A-Tive\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n\nconst UserListItem = ({ user, handleFunction }) => {\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { FaTelegramPlane } from \"react-icons/fa\"; // Importing the Telegram icon\nimport \"./styles.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ENDPOINT = \"https://shopeasychatapp-backend.onrender.com\"; // Update with your server's endpoint\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n  const { selectedChat, setSelectedChat, user, notification, setNotification } = ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n      const { data } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: \"Failed to load the messages.\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async () => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occurred!\",\n          description: \"Failed to send the message.\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message received\", (newMessageReceived) => {\n      if (!selectedChatCompare || selectedChatCompare._id !== newMessageReceived.chat._id) {\n        if (!notification.includes(newMessageReceived)) {\n          setNotification([newMessageReceived, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageReceived]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {selectedChat.chatName.toUpperCase()}\n          </Text>\n\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner size=\"xl\" w={20} h={20} alignSelf=\"center\" margin=\"auto\" />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl mt={3} isRequired>\n              {istyping && (\n                <Lottie\n                  options={defaultOptions}\n                  width={70}\n                  style={{ marginBottom: 15, marginLeft: 0 }}\n                />\n              )}\n\n              <Box d=\"flex\" alignItems=\"center\">\n                <Input\n                  variant=\"filled\"\n                  bg=\"#E0E0E0\"\n                  placeholder=\"Enter a message..\"\n                  value={newMessage}\n                  onChange={typingHandler}\n                  onKeyDown={(e) => e.key === \"Enter\" && sendMessage()} // Send message on Enter key\n                />\n\n                <IconButton\n                  aria-label=\"Send Message\"\n                  icon={<FaTelegramPlane />}\n                  colorScheme=\"blue\"\n                  size=\"md\" // Set to medium size\n                  ml={2}\n                  onClick={sendMessage} // Send message on button click\n                />\n              </Box>\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n      <Button\n        variant=\"solid\" // Make button solid for better visibility\n        colorScheme=\"teal\" // Use a color scheme that matches your design\n        size=\"lg\" // Large button for better visibility\n        onClick={onOpen}\n        leftIcon=     { <i className=\"fas fa-search\"></i>}// Use an icon from react-icons\n        _hover={{ bg: \"teal.500\", color: \"white\" }} // Change background and text color on hover\n        _active={{ bg: \"teal.600\" }} // Darker background when button is clicked\n        _focus={{ boxShadow: \"outline\" }} // Focus styling\n        display=\"flex\"\n        alignItems=\"center\"\n        px={4} // Padding for horizontal spacing\n        borderRadius=\"md\" // Rounded corners\n      >\n        <Text d={{ base: \"none\", md: \"flex\" }} ml={4}>\n          Search User\n        </Text>\n      </Button>\n    </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          ShopEasy ChatApp\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}